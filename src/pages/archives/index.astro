---
import { getCollection, type CollectionEntry } from "astro:content";
import Card from "@components/Card";
import Footer from "@components/Footer.astro";
import Header from "@components/Header.astro";
import { SITE } from "@config";
import Layout from "@layouts/Layout.astro";
import Main from "@layouts/Main.astro";
import { projects } from "../../data/projects";
import type { Project } from "../../data/projects";

// ArchiveItem union type
type ArchiveItem =
  | { type: "blog"; pubDatetime: string; data: CollectionEntry<"blog"> }
  | { type: "project"; pubDatetime: string; data: Project };

// Redirect to 404 page if `showArchives` config is false
if (!SITE.showArchives) {
  return Astro.redirect("/404");
}

const posts = await getCollection(
  "blog",
  (post: CollectionEntry<"blog">) => !post.data.draft
);

// Normalize blog posts and projects to a common structure
const blogItems: ArchiveItem[] = posts.map((post: CollectionEntry<"blog">) => ({
  type: "blog",
  pubDatetime: post.data.pubDatetime,
  data: post,
}));
const projectItems: ArchiveItem[] = projects.map(project => ({
  type: "project",
  pubDatetime: project.pubDatetime,
  data: project,
}));

// Combine and sort all items by pubDatetime descending
const allItems: ArchiveItem[] = [...blogItems, ...projectItems].sort(
  (a, b) =>
    new Date(b.pubDatetime).getTime() - new Date(a.pubDatetime).getTime()
);

// Month map for display
const MonthMap: Record<string, string> = {
  "0": "January",
  "1": "February",
  "2": "March",
  "3": "April",
  "4": "May",
  "5": "June",
  "6": "July",
  "7": "August",
  "8": "September",
  "9": "October",
  "10": "November",
  "11": "December",
};

// Group by year, then by month
const groupedByYearMonth: Record<string, Record<string, ArchiveItem[]>> = {};
for (const item of allItems) {
  const date = new Date(item.pubDatetime);
  const year = date.getFullYear().toString();
  const month = date.getMonth().toString();
  if (!groupedByYearMonth[year]) groupedByYearMonth[year] = {};
  if (!groupedByYearMonth[year][month]) groupedByYearMonth[year][month] = [];
  groupedByYearMonth[year][month].push(item);
}
const years = Object.keys(groupedByYearMonth).sort(
  (a, b) => Number(b) - Number(a)
);
---

<Layout title={`Archives | ${SITE.title}`}>
  <Header activeNav="archives" />
  <Main pageTitle="Archives" pageDesc="All the articles and projects by year.">
    {
      years.map(year => (
        <div>
          <span class="text-2xl font-bold">{year}</span>
          <sup class="text-sm">
            {Object.values(groupedByYearMonth[year]).reduce(
              (acc, arr) => acc + arr.length,
              0
            )}
          </sup>
          <div class="mt-4 flex flex-col gap-10">
            {Object.keys(groupedByYearMonth[year])
              .sort((a, b) => Number(b) - Number(a))
              .map(month => (
                <div class="flex flex-col sm:flex-row sm:gap-x-10">
                  <div class="mb-2 min-w-36 text-right text-lg font-semibold text-skin-accent sm:my-6 sm:pr-10">
                    {MonthMap[month]}
                    <sup class="ml-1 text-xs text-skin-base/60">
                      {groupedByYearMonth[year][month].length}
                    </sup>
                  </div>
                  <div class="flex flex-1 list-none flex-col gap-6">
                    {groupedByYearMonth[year][month].map(item => (
                      <div class="relative">
                        <span
                          class={
                            "absolute -left-2 -top-2 rounded px-2 py-0.5 text-xs text-white " +
                            (item.type === "blog"
                              ? "bg-skin-accent/80"
                              : "bg-green-600/80")
                          }
                        >
                          {item.type === "blog" ? "Blog" : "Project"}
                        </span>
                        <Card
                          href={
                            item.type === "blog"
                              ? `/posts/${item.data.slug}`
                              : item.data.href
                          }
                          frontmatter={
                            item.type === "blog" ? item.data.data : item.data
                          }
                        />
                      </div>
                    ))}
                  </div>
                </div>
              ))}
          </div>
        </div>
      ))
    }
  </Main>
  <Footer />
</Layout>
